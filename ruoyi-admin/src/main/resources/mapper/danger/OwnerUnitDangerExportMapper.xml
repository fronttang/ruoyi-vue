<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.electrical.danger.mapper.OwnerUnitDangerExportMapper">
    
    <resultMap type="com.ruoyi.electrical.dto.DangerExportQueryDto" id="OwnerUnitResult">
        <result property="id"    column="id"    />
        <result property="code"    column="code"    />
        <result property="name"    column="name"    />
        <result property="grid"    column="grid"    />
        <result property="address"    column="address"    />
        <result property="layers"    column="layers"    />
        <result property="acreage"    column="acreage"    />
        <result property="doorNumber"    column="door_number"    />
        <result property="contact"    column="contact"    />
        <result property="phone"    column="phone"    />
        <result property="highRiskType"    column="high_risk_type"    />
        <result property="safetyIncharge"    column="safety_incharge"    />
        <result property="safetyInchargePhone"    column="safety_incharge_phone"    />
        <result property="safetyManager"    column="safety_manager"    />
        <result property="safetyManagerPhone"    column="safety_manager_phone"    />
        <result property="district"    column="district"    />
        <result property="districtName"    column="district_name"    />
        <result property="street"    column="street"    />
        <result property="streetName"    column="street_name"    />
        <result property="community"    column="community"    />
        <result property="communityName"    column="community_name"    />
        <result property="hamlet"    column="hamlet"    />
        <result property="hamletName"    column="hamlet_name"    />
        <result property="isTestReason"    column="is_test_reason"    />
        <result property="initialStatus"    column="initial_status"    />
        <result property="businessLicense"    column="business_license"    />
    </resultMap>
    
    <select id="exportByQuery" parameterType="com.ruoyi.electrical.dto.OwnerUnitDangerGroupDetailDto" resultMap="OwnerUnitResult">
    	select t.* from (select o.id, o.code, o.name, o.grid, o.address, o.layers, o.acreage, o.door_number, o.contact, o.phone,
    	o.district, o.street, o.community, o.hamlet, a.dict_label as district_name, b.dict_label as street_name, c.dict_label as community_name, d.dict_label as hamlet_name,
    	o.high_risk_type, o.safety_incharge, o.safety_incharge_phone, o.safety_manager, o.safety_manager_phone,
    	r1.is_test_reason,
		CASE WHEN r1.detect_status is null THEN 0 ELSE r1.detect_status END as initial_status,
		CASE WHEN r2.detect_status is null THEN 0 ELSE r2.detect_status END as review_status,
		CASE WHEN r1.detect_data is null THEN now() ELSE r1.detect_data END as initial_date,
		CASE WHEN r2.detect_data is null THEN now() ELSE r2.detect_data END as review_date,
		JSON_UNQUOTE(uc.config->'$.businessLicense') as business_license
		from owner_unit o 
		left join owner_unit_config uc on uc.unit_id = o.id
		left join owner_unit_report r1 on r1.unit_id = o.id and r1.type = '1'
		left join owner_unit_report r2 on r2.unit_id = o.id and r1.type = '2'
		left join sys_dict_data a on (o.district = a.dict_value and a.dict_type='district' and a.project_id = o.project_id)
		left join sys_dict_data b on (o.street = b.dict_value and b.dict_type='street' and b.project_id = o.project_id)
		left join sys_dict_data c on (o.community = c.dict_value and c.dict_type='community' and c.project_id = o.project_id)
		left join sys_dict_data d on (o.hamlet = d.dict_value and d.dict_type='hamlet' and d.project_id = o.project_id)
		where o.project_id = #{projectId}) t
		<where>  
            <if test="name != null and name !='' "> and t.name like concat('%', #{name}, '%')</if>
            <if test="district != null and district !='' "> and t.district = #{district}</if>
            <if test="street != null and street !='' "> and t.street = #{street}</if>
            <if test="community != null and community !='' "> and t.community = #{community}</if>
            <if test="hamlet != null and hamlet !='' "> and t.hamlet = #{hamlet}</if>
            <if test="highRiskType != null and highRiskType !='' "> and t.high_risk_type = #{highRiskType}</if>
            <if test="initialStatus != null and initialStatus !='' "> and t.initial_status = #{initialStatus}</if>
            <if test="reviewStatus != null and reviewStatus !='' "> and t.review_status = #{reviewStatus}</if>
            <if test="startInitialDate != null and startInitialDate !='' "> and date(t.initial_date) &gt;= #{startInitialDate}</if>
            <if test="endInitialDate != null and endInitialDate !='' "> and date(t.initial_date) &lt;= #{endInitialDate}</if>
            <if test="startReviewDate != null and startReviewDate !='' "> and date(t.review_date) &gt;= #{startReviewDate}</if>
            <if test="endReivewDate != null and endReivewDate !='' "> and date(t.review_date) &lt;= #{endReivewDate}</if>
        </where>
    	
    </select>
    
    <select id="exportByUnitId" parameterType="Long" resultMap="OwnerUnitResult">
    	select o.id, o.code, o.name, o.grid, o.address, o.layers, o.acreage, o.door_number, o.contact, o.phone,
    	o.district, o.street, o.community, o.hamlet, a.dict_label as district_name, b.dict_label as street_name, c.dict_label as community_name, d.dict_label as hamlet_name,
    	o.high_risk_type, o.safety_incharge, o.safety_incharge_phone, o.safety_manager, o.safety_manager_phone,
    	r1.is_test_reason,
		CASE WHEN r1.detect_status is null THEN 0 ELSE r1.detect_status END as initial_status,
		CASE WHEN r2.detect_status is null THEN 0 ELSE r2.detect_status END as review_status,
		CASE WHEN r1.detect_data is null THEN now() ELSE r1.detect_data END as initial_date,
		CASE WHEN r2.detect_data is null THEN now() ELSE r2.detect_data END as review_date,
		JSON_UNQUOTE(uc.config->'$.businessLicense') as business_license
		from owner_unit o 
		left join owner_unit_config uc on uc.unit_id = o.id
		left join owner_unit_report r1 on r1.unit_id = o.id and r1.type = '1'
		left join owner_unit_report r2 on r2.unit_id = o.id and r1.type = '2'
		left join sys_dict_data a on (o.district = a.dict_value and a.dict_type='district' and a.project_id = o.project_id)
		left join sys_dict_data b on (o.street = b.dict_value and b.dict_type='street' and b.project_id = o.project_id)
		left join sys_dict_data c on (o.community = c.dict_value and c.dict_type='community' and c.project_id = o.project_id)
		left join sys_dict_data d on (o.hamlet = d.dict_value and d.dict_type='hamlet' and d.project_id = o.project_id)
		where o.id in 
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    	
    </select>
    
    <resultMap type="com.ruoyi.electrical.dto.OwnerUnitDangerExportDto" id="OwnerUnitDangerResult">
        <result property="id"    column="id"    />
        <result property="unitId"    column="unit_id"    />
        <result property="detectId"    column="detect_id"    />
        <result property="unitName"    column="unit_name"    />
        <result property="buildingId"    column="building_id"    />
        <result property="buildingName"    column="building_name"    />
        <result property="unitAreaId"    column="unit_area_id"    />
        <result property="areaName"    column="area_name"    />
        <result property="chargingPileId"    column="charging_pile_id"    />
        <result property="chargingPileName"    column="charging_pile_name"    />
        <result property="rounds"    column="rounds"    />
        <result property="dangerId"    column="danger_id"    />
        <result property="formId"    column="form_id"    />
        <result property="formCode"    column="form_code"    />
        <result property="formType"    column="form_type"    />
        <result property="formDataId"    column="form_data_id"    />
        <result property="level"    column="level"    />
        <result property="description"    column="description"    />
        <result property="suggestions"    column="suggestions"    />
        <result property="location"    column="location"    />
        <result property="dangerPic"    column="danger_pic"    />
        <result property="status"    column="status"    />
        <result property="inspector"    column="inspector"    />
        <result property="inspectorId"    column="inspector_id"    />
        <result property="initialTime"    column="initial_time"    />
        <result property="formb"    column="formb"  typeHandler="com.ruoyi.electrical.danger.type.JsonObjectTypeHandler"  />
        <result property="rectification"    column="rectification"    />
        <result property="rectificationDate"    column="rectification_date"    />
        <result property="reviewer"    column="reviewer"    />
        <result property="reviewerDate"    column="reviewer_date"    />
        <result property="rectificationPic"    column="rectification_pic"    />
        <result property="reason"    column="reason"    />
        <result property="detectPic"    column="detect_pic"    />
        <result property="overallPic"    column="overall_pic"    />
        <result property="inspectionPic"    column="inspection_pic"    />
        <result property="createBy"    column="create_by"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateBy"    column="update_by"    />
        <result property="updateTime"    column="update_time"    />
        <result property="firstCode"    column="first_code"    />
        <result property="firstContent"    column="first_content"    />
        <result property="maxScore"    column="max_score"    />
        <result property="remark"    column="remark"    />
    </resultMap>

	<sql id="selectOwnerUnitDangerVo">
        select d.id, d.unit_id, u.name as unit_name, u.detect_id, a.name as area_name, b.name as building_name, 
        d.charging_pile_id, d.rounds, d.remark,
        d.building_id, d.unit_area_id, d.danger_id, d.form_id, d.form_code, d.form_type, d.form_data_id, d.formb,
        d.level, d.description, d.suggestions, d.location, d.danger_pic, d.status, d.inspector, d.inspector_id, d.initial_time, 
        d.rectification, d.rectification_date, d.reviewer, d.reviewer_date, d.rectification_pic, d.reason, d.detect_pic, 
        d.create_by, d.create_time, d.update_by, d.update_time, 
        ( select GROUP_CONCAT(cp.name) from charging_pile cp where cp.id member of(d.charging_pile_id) and cp.unit_id = d.unit_id ) as charging_pile_name,
        JSON_UNQUOTE(d.formb->'$.data.overallPic') as overall_pic,  JSON_UNQUOTE(d.formb->'$.data.inspectionPic') as inspection_pic, 
        idd.first_code, idd.first_content, idd1.max_score, dd.score
        from owner_unit_danger d 
        left join owner_unit u on u.id = d.unit_id
        left join owner_unit_area a on a.id = d.unit_area_id
        left join owner_unit_building b on b.id = d.building_id
        left join intuitive_detect_danger dd on dd.id = d.danger_id
        left join intuitive_detect_data idd on idd.id = d.form_data_id
        LEFT JOIN intuitive_detect_data idd1 ON idd1.id = idd.parent_id 
    </sql>
    
    <select id="queryDangersByUnitId" parameterType="Long" resultMap="OwnerUnitDangerResult">
        <include refid="selectOwnerUnitDangerVo"/>
        where u.id = #{id}
    </select>
    
    <resultMap type="com.ruoyi.electrical.dto.DangerExportUrbanVillageQueryDto" id="DangerExportUrbanVillageQueryDto">
        <result property="id"    column="id"    />
        <result property="code"    column="code"    />
        <result property="name"    column="name"    />
        <result property="address"    column="address"    />
        <result property="layers"    column="layers"    />
        <result property="acreage"    column="acreage"    />
        <result property="doorNumber"    column="door_number"    />
        <result property="contact"    column="contact"    />
        <result property="phone"    column="phone"    />
        <result property="district"    column="district"    />
        <result property="districtName"    column="district_name"    />
        <result property="street"    column="street"    />
        <result property="streetName"    column="street_name"    />
        <result property="community"    column="community"    />
        <result property="communityName"    column="community_name"    />
        <result property="hamlet"    column="hamlet"    />
        <result property="hamletName"    column="hamlet_name"    />
        <result property="isTestReason"    column="is_test_reason"    />
        <result property="isDangerNotice"    column="is_danger_notice"    />
        <result property="gridman"    column="gridman"    />
        <result property="gridmanPhone"    column="gridman_phone"    />
        <result property="detectName"    column="detect_name"    />
        <result property="testStartDate"    column="test_start_date"    />
        <result property="testEndDate"    column="test_end_date"    />
        <result property="inspectionPic"    column="inspection_pic"    />
        <result property="reviewDate"    column="review_date"    />
        <result property="reivewCode"    column="reivew_code"    />
    </resultMap>
    
    
    <select id="exportUrbanVillageByQuery" parameterType="com.ruoyi.electrical.dto.OwnerUnitDangerGroupDetailDto" resultMap="DangerExportUrbanVillageQueryDto">
    	select t.* from (select o.id, o.code, o.name, o.address, o.layers, o.acreage, o.door_number, o.contact, o.phone,
    	o.district, o.street, o.community, o.hamlet, a.dict_label as district_name, b.dict_label as street_name, c.dict_label as community_name, d.dict_label as hamlet_name,
		r1.is_danger_notice, su.nick_name as gridman, su.user_name as gridman_phone,
		du.name as detect_name, o.test_start_date, o.test_end_date,o.inspection_pic,
		r1.code as initial_code, r2.code as reivew_code,
		CASE WHEN r1.detect_status is null THEN 0 ELSE r1.detect_status END as initial_status,
		CASE WHEN r2.detect_status is null THEN 0 ELSE r2.detect_status END as review_status,
		CASE WHEN r1.detect_data is null THEN now() ELSE r1.detect_data END as initial_date,
		CASE WHEN r2.detect_data is null THEN now() ELSE r2.detect_data END as review_date,
		(select count(1) from owner_unit_area ua where ua.unit_id = o.id and ua.type = '2') as areas
		from owner_unit o 
		left join owner_unit_report r1 on r1.unit_id = o.id and r1.type = '1'
		left join owner_unit_report r2 on r2.unit_id = o.id and r1.type = '2'
		left join sys_dict_data a on (o.district = a.dict_value and a.dict_type='district' and a.project_id = o.project_id)
		left join sys_dict_data b on (o.street = b.dict_value and b.dict_type='street' and b.project_id = o.project_id)
		left join sys_dict_data c on (o.community = c.dict_value and c.dict_type='community' and c.project_id = o.project_id)
		left join sys_dict_data d on (o.hamlet = d.dict_value and d.dict_type='hamlet' and d.project_id = o.project_id)
		left join sys_user su on (su.user_id = o.gridman and su.project_id = o.project_id)
		left join detect_unit du on du.id = o.detect_id
		where o.project_id = #{projectId}) t
		<where>  
            <if test="name != null and name !='' "> and t.name like concat('%', #{name}, '%')</if>
            <if test="district != null and district !='' "> and t.district = #{district}</if>
            <if test="street != null and street !='' "> and t.street = #{street}</if>
            <if test="community != null and community !='' "> and t.community = #{community}</if>
            <if test="hamlet != null and hamlet !='' "> and t.hamlet = #{hamlet}</if>
            <if test="initialStatus != null and initialStatus !='' "> and t.initial_status = #{initialStatus}</if>
            <if test="reviewStatus != null and reviewStatus !='' "> and t.review_status = #{reviewStatus}</if>
            <if test="startInitialDate != null and startInitialDate !='' "> and date(t.initial_date) &gt;= #{startInitialDate}</if>
            <if test="endInitialDate != null and endInitialDate !='' "> and date(t.initial_date) &lt;= #{endInitialDate}</if>
            <if test="startReviewDate != null and startReviewDate !='' "> and date(t.review_date) &gt;= #{startReviewDate}</if>
            <if test="endReivewDate != null and endReivewDate !='' "> and date(t.review_date) &lt;= #{endReivewDate}</if>
        </where>
    	
    </select>
    
    <select id="exportUrbanVillageByUnitId" parameterType="Long" resultMap="DangerExportUrbanVillageQueryDto">
    	select o.id, o.code, o.name, o.address, o.layers, o.acreage, o.door_number, o.contact, o.phone,
    	o.district, o.street, o.community, o.hamlet, a.dict_label as district_name, b.dict_label as street_name, c.dict_label as community_name, d.dict_label as hamlet_name,
		r1.is_danger_notice, su.nick_name as gridman, su.user_name as gridman_phone,
		du.name as detect_name, o.test_start_date, o.test_end_date,o.inspection_pic,
		r1.code as initial_code, r2.code as reivew_code,
		CASE WHEN r1.detect_status is null THEN 0 ELSE r1.detect_status END as initial_status,
		CASE WHEN r2.detect_status is null THEN 0 ELSE r2.detect_status END as review_status,
		CASE WHEN r1.detect_data is null THEN now() ELSE r1.detect_data END as initial_date,
		CASE WHEN r2.detect_data is null THEN now() ELSE r2.detect_data END as review_date,
		(select count(1) from owner_unit_area ua where ua.unit_id = o.id and ua.type = '2') as areas
		from owner_unit o 
		left join owner_unit_report r1 on r1.unit_id = o.id and r1.type = '1'
		left join owner_unit_report r2 on r2.unit_id = o.id and r1.type = '2'
		left join sys_dict_data a on (o.district = a.dict_value and a.dict_type='district' and a.project_id = o.project_id)
		left join sys_dict_data b on (o.street = b.dict_value and b.dict_type='street' and b.project_id = o.project_id)
		left join sys_dict_data c on (o.community = c.dict_value and c.dict_type='community' and c.project_id = o.project_id)
		left join sys_dict_data d on (o.hamlet = d.dict_value and d.dict_type='hamlet' and d.project_id = o.project_id)
		left join sys_user su on (su.user_id = o.gridman and su.project_id = o.project_id)
		left join detect_unit du on du.id = o.detect_id
		where o.id in 
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>
    
    <resultMap type="com.ruoyi.electrical.dto.DangerExportStationQueryDto" id="DangerExportStationQueryDto">
        <result property="id"    column="id"    />
        <result property="code"    column="code"    />
        <result property="name"    column="name"    />
        <result property="address"    column="address"    />
        <result property="contact"    column="contact"    />
        <result property="phone"    column="phone"    />
        <result property="district"    column="district"    />
        <result property="districtName"    column="district_name"    />
        <result property="street"    column="street"    />
        <result property="streetName"    column="street_name"    />
        <result property="community"    column="community"    />
        <result property="communityName"    column="community_name"    />
        <result property="hamlet"    column="hamlet"    />
        <result property="hamletName"    column="hamlet_name"    />
        <result property="projectId"    column="project_id"    />
        <result property="initialDate"    column="initial_date"    />        
        <result property="operatingDate"    column="operating_date"    />        
        <result property="detectModule"    column="detect_module"    />        
        <result property="stationType"    column="station_type"    />        
    </resultMap>
    
    <select id="exportStationByQuery" parameterType="com.ruoyi.electrical.dto.OwnerUnitDangerGroupDetailDto" resultMap="DangerExportStationQueryDto">
    	select t.* from (select o.id, o.code, o.name, o.address, o.layers, o.acreage, o.door_number, o.contact, o.phone, o.project_id,
    	o.district, o.street, o.community, o.hamlet, a.dict_label as district_name, b.dict_label as street_name, c.dict_label as community_name, d.dict_label as hamlet_name,
		r1.is_danger_notice, su.nick_name as gridman, su.user_name as gridman_phone,
		du.name as detect_name, o.test_start_date, o.test_end_date,o.inspection_pic,
		o.operating,o.operating_date,o.vehicles,o.lounge,o.remark,o.details,o.detect_module,o.station_type,
		CASE WHEN r1.detect_status is null THEN 0 ELSE r1.detect_status END as initial_status,
		CASE WHEN r2.detect_status is null THEN 0 ELSE r2.detect_status END as review_status,
		CASE WHEN r1.detect_data is null THEN now() ELSE r1.detect_data END as initial_date,
		CASE WHEN r2.detect_data is null THEN now() ELSE r2.detect_data END as review_date,
		(select count(1) from owner_unit_area ua where ua.unit_id = o.id and ua.type = '2') as areas
		from owner_unit o 
		left join owner_unit_report r1 on r1.unit_id = o.id and r1.type = '1'
		left join owner_unit_report r2 on r2.unit_id = o.id and r1.type = '2'
		left join sys_dict_data a on (o.district = a.dict_value and a.dict_type='district' and a.project_id = o.project_id)
		left join sys_dict_data b on (o.street = b.dict_value and b.dict_type='street' and b.project_id = o.project_id)
		left join sys_dict_data c on (o.community = c.dict_value and c.dict_type='community' and c.project_id = o.project_id)
		left join sys_dict_data d on (o.hamlet = d.dict_value and d.dict_type='hamlet' and d.project_id = o.project_id)
		left join sys_user su on (su.user_id = o.gridman and su.project_id = o.project_id)
		left join detect_unit du on du.id = o.detect_id
		where o.project_id = #{projectId}) t
		<where>  
            <if test="name != null and name !='' "> and t.name like concat('%', #{name}, '%')</if>
            <if test="district != null and district !='' "> and t.district = #{district}</if>
            <if test="street != null and street !='' "> and t.street = #{street}</if>
            <if test="community != null and community !='' "> and t.community = #{community}</if>
            <if test="hamlet != null and hamlet !='' "> and t.hamlet = #{hamlet}</if>
            <if test="initialStatus != null and initialStatus !='' "> and t.initial_status = #{initialStatus}</if>
            <if test="reviewStatus != null and reviewStatus !='' "> and t.review_status = #{reviewStatus}</if>
            <if test="startInitialDate != null and startInitialDate !='' "> and date(t.initial_date) &gt;= #{startInitialDate}</if>
            <if test="endInitialDate != null and endInitialDate !='' "> and date(t.initial_date) &lt;= #{endInitialDate}</if>
            <if test="startReviewDate != null and startReviewDate !='' "> and date(t.review_date) &gt;= #{startReviewDate}</if>
            <if test="endReivewDate != null and endReivewDate !='' "> and date(t.review_date) &lt;= #{endReivewDate}</if>
        </where>
    	
    </select>
    
    <select id="exportStationByUnitId" parameterType="Long" resultMap="DangerExportStationQueryDto">
    	select o.id, o.code, o.name, o.address, o.layers, o.acreage, o.door_number, o.contact, o.phone, o.project_id,
    	o.district, o.street, o.community, o.hamlet, a.dict_label as district_name, b.dict_label as street_name, c.dict_label as community_name, d.dict_label as hamlet_name,
		r1.is_danger_notice, su.nick_name as gridman, su.user_name as gridman_phone,
		du.name as detect_name, o.test_start_date, o.test_end_date,o.inspection_pic,
		o.operating,o.operating_date,o.vehicles,o.lounge,o.remark,o.details,o.detect_module,o.station_type,
		CASE WHEN r1.detect_status is null THEN 0 ELSE r1.detect_status END as initial_status,
		CASE WHEN r2.detect_status is null THEN 0 ELSE r2.detect_status END as review_status,
		CASE WHEN r1.detect_data is null THEN now() ELSE r1.detect_data END as initial_date,
		CASE WHEN r2.detect_data is null THEN now() ELSE r2.detect_data END as review_date,
		(select count(1) from owner_unit_area ua where ua.unit_id = o.id and ua.type = '2') as areas
		from owner_unit o 
		left join owner_unit_report r1 on r1.unit_id = o.id and r1.type = '1'
		left join owner_unit_report r2 on r2.unit_id = o.id and r1.type = '2'
		left join sys_dict_data a on (o.district = a.dict_value and a.dict_type='district' and a.project_id = o.project_id)
		left join sys_dict_data b on (o.street = b.dict_value and b.dict_type='street' and b.project_id = o.project_id)
		left join sys_dict_data c on (o.community = c.dict_value and c.dict_type='community' and c.project_id = o.project_id)
		left join sys_dict_data d on (o.hamlet = d.dict_value and d.dict_type='hamlet' and d.project_id = o.project_id)
		left join sys_user su on (su.user_id = o.gridman and su.project_id = o.project_id)
		left join detect_unit du on du.id = o.detect_id
		where o.id in 
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>
    
</mapper>