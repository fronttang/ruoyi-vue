<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.electrical.project.mapper.ProjectMapper">
    
    <resultMap type="Project" id="ProjectResult">
        <result property="id"    column="id"    />
        <result property="name"    column="name"    />
        <result property="type"    column="type"    />
        <result property="detectId"    column="detect_id"    />
        <result property="detectName"    column="detect_name"    />
        <result property="householdRate"    column="household_rate"    />
        <result property="templateId"    column="template_id"    />
        <result property="createBy"    column="create_by"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateBy"    column="update_by"    />
        <result property="updateTime"    column="update_time"    />
    </resultMap>
    
    <sql id="selectProjectVo">
        select p.id, p.name, p.type, p.detect_id, d.name as detect_name, p.household_rate, p.template_id, p.create_by, p.create_time, p.update_by, p.update_time 
        from project p left join detect_unit d on p.detect_id=d.id 
    </sql>

    <select id="selectProjectList" parameterType="Project" resultMap="ProjectResult">
        <include refid="selectProjectVo"/>
        <where>  
            <if test="name != null  and name != ''"> and p.name like concat('%', #{name}, '%')</if>
            <if test="type != null  and type != ''"> and p.type = #{type}</if>
            <if test="detectId != null "> and p.detect_id = #{detectId}</if>
            <if test="householdRate != null "> and household_rate = #{householdRate}</if>
            <if test="templateId != null "> and template_id = #{templateId}</if>
        </where>
    </select>
    
    <select id="checkProjectName" parameterType="Project" resultType="Integer">
        select count(1) from project p 
        <where>   
            <if test="name != null  and name != ''"> and p.name = #{name}</if>
            <if test="id != null  and id != ''"> and p.id != #{id}</if>
        </where>
    </select>
    
    <select id="selectProjectById" parameterType="Long" resultMap="ProjectResult">
        <include refid="selectProjectVo"/>
        where p.id = #{id}
    </select>
    
    <select id="selectProjectDict"  resultType="com.ruoyi.electrical.vo.DictVO">
        select id, name from project
    </select>
    
    <select id="selectProjectDictByDetectId"  resultType="com.ruoyi.electrical.vo.DictVO">
        select id, name from project where detect_id = #{detectId}
    </select>
    
    <select id="selectProjectDictByWorkerId"  resultType="com.ruoyi.electrical.vo.DictVO">
        select id, name from project p where  exists (select project_id from project_worker w where w.project_id = p.id and w.user_id = #{userId})
    </select>
    
    <insert id="insertProject" parameterType="Project" useGeneratedKeys="true" keyProperty="id">
        insert into project
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="name != null">name,</if>
            <if test="type != null">type,</if>
            <if test="detectId != null">detect_id,</if>
            <if test="detectName != null">detect_name,</if>
            <if test="householdRate != null">household_rate,</if>
            <if test="templateId != null">template_id,</if>
            <if test="createBy != null">create_by,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateBy != null">update_by,</if>
            <if test="updateTime != null">update_time,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="name != null">#{name},</if>
            <if test="type != null">#{type},</if>
            <if test="detectId != null">#{detectId},</if>
            <if test="detectName != null">#{detectName},</if>
            <if test="householdRate != null">#{householdRate},</if>
            <if test="templateId != null">#{templateId},</if>
            <if test="createBy != null">#{createBy},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateBy != null">#{updateBy},</if>
            <if test="updateTime != null">#{updateTime},</if>
         </trim>
    </insert>

    <update id="updateProject" parameterType="Project">
        update project
        <trim prefix="SET" suffixOverrides=",">
            <if test="name != null">name = #{name},</if>
            <if test="type != null">type = #{type},</if>
            <if test="detectId != null">detect_id = #{detectId},</if>
            <if test="detectName != null">detect_name = #{detectName},</if>
            <if test="householdRate != null">household_rate = #{householdRate},</if>
            <if test="templateId != null">template_id = #{templateId},</if>
            <if test="createBy != null">create_by = #{createBy},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updateBy != null">update_by = #{updateBy},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteProjectById" parameterType="Long">
        delete from project where id = #{id}
    </delete>

    <delete id="deleteProjectByIds" parameterType="String">
        delete from project where id in 
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
</mapper>